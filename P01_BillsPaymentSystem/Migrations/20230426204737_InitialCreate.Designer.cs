// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using P01_BillsPaymentSystem.Data;

#nullable disable

namespace P01_BillsPaymentSystem.Migrations
{
    [DbContext(typeof(BillsPaymentSystemContext))]
    [Migration("20230426204737_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("P01_BillsPaymentSystem.Data.Models.BankAccount", b =>
                {
                    b.Property<Guid>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SwiftCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("BankAccountId");

                    b.ToTable("BankAccounts");

                    b.HasData(
                        new
                        {
                            BankAccountId = new Guid("dbe78099-039d-4e37-9cef-f63f2bf36c32"),
                            Balance = 335.6913905349661900m,
                            BankName = "Unions Fresh Intelligent Fresh Chips",
                            SwiftCode = "684"
                        },
                        new
                        {
                            BankAccountId = new Guid("25cc3843-0ada-49a6-93eb-2da2dfaa35c3"),
                            Balance = 2124.750118457212300m,
                            BankName = "mindshare wireless capacitor",
                            SwiftCode = "148"
                        },
                        new
                        {
                            BankAccountId = new Guid("8838c1cd-6452-4c6f-a1a6-15f86dcb55d7"),
                            Balance = 7495.277549756971600m,
                            BankName = "Intelligent Concrete Shoes Unbranded",
                            SwiftCode = "981"
                        },
                        new
                        {
                            BankAccountId = new Guid("61ad22f1-ca4f-452d-a082-a45f1a75ddb7"),
                            Balance = 1624.857765420345400m,
                            BankName = "Flat upward-trending Glens",
                            SwiftCode = "306"
                        },
                        new
                        {
                            BankAccountId = new Guid("c71e410f-8dd7-4702-8eb8-f83db34583a5"),
                            Balance = 1789.231731598516600m,
                            BankName = "Central National",
                            SwiftCode = "342"
                        });
                });

            modelBuilder.Entity("P01_BillsPaymentSystem.Data.Models.CreditCard", b =>
                {
                    b.Property<Guid>("CreditCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Limit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LimitLeft")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MoneyOwed")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CreditCardId");

                    b.ToTable("CreditCards");

                    b.HasData(
                        new
                        {
                            CreditCardId = new Guid("a8a1cbb5-1a7a-4f93-b28f-e5b94cbc4460"),
                            ExpirationDate = new DateTime(2023, 9, 3, 11, 16, 16, 683, DateTimeKind.Local).AddTicks(5746),
                            Limit = 2027.513564242651000m,
                            LimitLeft = 0m,
                            MoneyOwed = 4858.208290647285000m
                        },
                        new
                        {
                            CreditCardId = new Guid("0db5c1a3-043e-4378-b374-1e048207db07"),
                            ExpirationDate = new DateTime(2026, 1, 31, 3, 4, 14, 979, DateTimeKind.Local).AddTicks(8312),
                            Limit = 6196.176091410571000m,
                            LimitLeft = 0m,
                            MoneyOwed = 2396.328236055940000m
                        },
                        new
                        {
                            CreditCardId = new Guid("52d9b383-c43b-4f0d-a287-85616e023377"),
                            ExpirationDate = new DateTime(2027, 6, 29, 10, 17, 29, 982, DateTimeKind.Local).AddTicks(5738),
                            Limit = 8249.278998590992000m,
                            LimitLeft = 0m,
                            MoneyOwed = 968.785015479360000m
                        },
                        new
                        {
                            CreditCardId = new Guid("fefe0d0d-34b5-4dcb-a25d-fcd21995ba9c"),
                            ExpirationDate = new DateTime(2023, 9, 17, 3, 33, 38, 504, DateTimeKind.Local).AddTicks(1672),
                            Limit = 7014.94551968005000m,
                            LimitLeft = 0m,
                            MoneyOwed = 2903.120998503345000m
                        },
                        new
                        {
                            CreditCardId = new Guid("cb44d1e5-beb6-49f5-8cf0-fe9a6948921a"),
                            ExpirationDate = new DateTime(2024, 9, 22, 23, 23, 2, 234, DateTimeKind.Local).AddTicks(1128),
                            Limit = 8022.258885596527000m,
                            LimitLeft = 0m,
                            MoneyOwed = 4579.600297635315000m
                        });
                });

            modelBuilder.Entity("P01_BillsPaymentSystem.Data.Models.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreditCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId")
                        .IsUnique()
                        .HasFilter("[BankAccountId] IS NOT NULL");

                    b.HasIndex("CreditCardId")
                        .IsUnique()
                        .HasFilter("[CreditCardId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethods", t =>
                        {
                            t.HasCheckConstraint("CK_PaymentMethodAccountOrCard", "((BankAccountId IS NOT NULL AND CreditCardId IS NULL) OR (BankAccountId IS NULL AND CreditCardId IS NOT NULL))");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("acf24fee-4403-40ed-9b3d-80119e00dd7e"),
                            CreditCardId = new Guid("fefe0d0d-34b5-4dcb-a25d-fcd21995ba9c"),
                            Type = "CreditCard",
                            UserId = new Guid("cd97b8d9-afbb-4cf8-9143-6a473c54c46e")
                        },
                        new
                        {
                            Id = new Guid("838176cd-ecfd-42da-9781-fc29a218ed3a"),
                            CreditCardId = new Guid("52d9b383-c43b-4f0d-a287-85616e023377"),
                            Type = "CreditCard",
                            UserId = new Guid("c9a62ef1-aa0a-48b9-baa9-3de3e3ead56f")
                        },
                        new
                        {
                            Id = new Guid("a3f35e91-82da-42df-854a-363682aee0c8"),
                            BankAccountId = new Guid("25cc3843-0ada-49a6-93eb-2da2dfaa35c3"),
                            Type = "BankAccount",
                            UserId = new Guid("f3474a41-bdf3-40b9-ace0-d8f44619b8c4")
                        },
                        new
                        {
                            Id = new Guid("60fde458-def6-4c2d-a8de-4e7f17036ae7"),
                            BankAccountId = new Guid("c71e410f-8dd7-4702-8eb8-f83db34583a5"),
                            Type = "BankAccount",
                            UserId = new Guid("f3474a41-bdf3-40b9-ace0-d8f44619b8c4")
                        },
                        new
                        {
                            Id = new Guid("457cfa51-9866-4004-9590-f1535577e268"),
                            BankAccountId = new Guid("61ad22f1-ca4f-452d-a082-a45f1a75ddb7"),
                            Type = "BankAccount",
                            UserId = new Guid("6823ca12-b6ea-417f-a159-640444c34733")
                        });
                });

            modelBuilder.Entity("P01_BillsPaymentSystem.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c9a62ef1-aa0a-48b9-baa9-3de3e3ead56f"),
                            Email = "Jean_Boyle@yahoo.com",
                            FirstName = "Jean",
                            LastName = "Boyle",
                            Password = "7_s6DxaeUV"
                        },
                        new
                        {
                            UserId = new Guid("cd97b8d9-afbb-4cf8-9143-6a473c54c46e"),
                            Email = "Lori.Schowalter@yahoo.com",
                            FirstName = "Lori",
                            LastName = "Schowalter",
                            Password = "mHzr_HV3ww"
                        },
                        new
                        {
                            UserId = new Guid("b4594aac-8dc5-428d-b8a0-7ff7900849cc"),
                            Email = "Dana47@yahoo.com",
                            FirstName = "Dana",
                            LastName = "Keeling",
                            Password = "RGghd4uMAz"
                        },
                        new
                        {
                            UserId = new Guid("f3474a41-bdf3-40b9-ace0-d8f44619b8c4"),
                            Email = "Sheryl36@gmail.com",
                            FirstName = "Sheryl",
                            LastName = "Rogahn",
                            Password = "4dTTgPEz8B"
                        },
                        new
                        {
                            UserId = new Guid("6823ca12-b6ea-417f-a159-640444c34733"),
                            Email = "Ricky_McClure95@hotmail.com",
                            FirstName = "Ricky",
                            LastName = "McClure",
                            Password = "ZovoCu2lQo"
                        });
                });

            modelBuilder.Entity("P01_BillsPaymentSystem.Data.Models.PaymentMethod", b =>
                {
                    b.HasOne("P01_BillsPaymentSystem.Data.Models.BankAccount", "BankAccount")
                        .WithOne("PaymentMethod")
                        .HasForeignKey("P01_BillsPaymentSystem.Data.Models.PaymentMethod", "BankAccountId");

                    b.HasOne("P01_BillsPaymentSystem.Data.Models.CreditCard", "CreditCard")
                        .WithOne("PaymentMethod")
                        .HasForeignKey("P01_BillsPaymentSystem.Data.Models.PaymentMethod", "CreditCardId");

                    b.HasOne("P01_BillsPaymentSystem.Data.Models.User", "User")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("CreditCard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("P01_BillsPaymentSystem.Data.Models.BankAccount", b =>
                {
                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("P01_BillsPaymentSystem.Data.Models.CreditCard", b =>
                {
                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("P01_BillsPaymentSystem.Data.Models.User", b =>
                {
                    b.Navigation("PaymentMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
